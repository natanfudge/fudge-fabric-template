plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.plugin.serialization"
    id "com.jfrog.bintray"
    id 'com.matthewprenger.cursegradle'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}


repositories {
    maven { url = "http://maven.fabricmc.net/" }
    jcenter()
}


dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
    modImplementation("com.lettuce.fudge:fabric-drawer:$drawer_version")

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property "version", project.mod_version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

def github_url = "https://github.com/$github_project"

// configure the maven publication
bintray {
    user = project.hasProperty('bintray_user') ? project.property('bintray_user') : ""
    key = project.hasProperty('bintray_api_key') ? project.property('bintray_api_key') : ""
    publications = ["MavenPublication"]
    publish = true //[Default: false] Whether version should be auto published after an upload
    pkg {
        repo = "libs"
        name = archives_base_name
        desc = description
        websiteUrl = github_url
        issueTrackerUrl = "$github_url/issues"
        githubRepo = github_project //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file
        licenses = [license]
        vcsUrl = github_url
        version {
            name = mod_version
            released = new Date()
        }
    }

}

def pomConfig = {
    licenses {
        license {
            name project.license
        }
    }
    developers {
        developer {
            id "fudge"
            name "natan"
            email "natandestroyer100@gmail.com"
        }
    }

    scm {
        url github_url
    }
}

publishing {
    publications {
        MavenPublication(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(kotlinSourcesJar) {
                classifier = "sources"
                builtBy remapSourcesJar
            }
            groupId project.maven_group
            artifactId project.archives_base_name
            version project.mod_version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', description)
                root.appendNode('name', archives_base_name)
                root.appendNode('url', github_url)
                root.children().last() + pomConfig
            }
        }
    }
}

//TODO: uncomment
//curseforge {
//    apiKey = project.hasProperty("curseforge_api_key") ? project.curseforge_api_key : ""
//    project {
//        id = curseforge_id
//        releaseType = 'release'
//        addGameVersion "Fabric"
//        changelogType = "markdown"
//        changelog = file("changelog.md")
//
//        mainArtifact(remapJar) {
//            displayName = "$display_name $project.mod_version"
//        }
//        addArtifact sourcesJar
//
//        afterEvaluate {
//            mainArtifact(remapJar)
//            uploadTask.dependsOn(remapJar)
//        }
//    }
//
//    options {
//        forgeGradleIntegration = false
//    }
//}

compileKotlin.kotlinOptions.jvmTarget = "1.8"

Properties properties = new Properties()
File propertiesFile = new File('gradle.properties')
propertiesFile.withInputStream {
    properties.load(it)
}


task updateTemplate(type: Copy) {
    group = "template"
    description = "Switches out gradle.properties variables like \$mod_version in .template.md files, and copies the results into .md files."
    from(rootDir)
    include("**/*.template.md")
    filesMatching("**/*.template.md") {
        def extensionLength = ".template.md".length()

        name = sourceName.substring(0, sourceName.length() - extensionLength) + ".md"
        expand(properties)
    }
    destinationDir = rootDir
}

bintrayUpload.dependsOn updateTemplate
//TODO: uncomment
//bintrayUpload.dependsOn "curseforge$curseforge_id"

